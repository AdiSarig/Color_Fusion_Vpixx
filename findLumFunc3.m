function p = findLumFunc3(base,gun1,gun2,range,p,rgbGamma)%% function coeff = findLumFunc3(base,range,p,rgbGamma)%% Function to find beta such that lum(beta * C1) = lum(C2)% where C1 and C2 are two different RGB combinations.% Range specifies that range of values ([0,1]) through which% electron gun1 is tested against electron gun 2 (whose intensity% stays fixed at gun2).% gun1 and gun2 can be the number 1, 2, or 3 to indicate R, G, or B% respectively. gun1 and gun2 may not be the same.%% 19 Oct 2005% Changed call to findIsoluminance2 (passed in 4th parameter), to tell% the program not to close the window after each run. This makes the% procedure more pleasant for the subject (doesn't switch back to the% Mac desktop in between each run, which tends to bother the eyes).%% 22 Jul 2009% Start with symmetrical deviations from the base and their lumFunc% (found with findLumFunc2) and for each one, find beta for its mirror image.%if gun1 == gun2	error('gun1 and gun2 may not be the same')	returnenddisp('Press any key to continue...');pauseind = shuffle([1:length(range)]);w = initPsychToolboxWindows_noCLUT([],1);for i=1:length(range)    b = polyval(p,range(ind(i)));	C1 = base; C1([gun1 gun2]) = (C1([gun1 gun2]) + [+range(ind(i)) -range(ind(i))]) * b;    C2 = C1; C2(gun1)=C1(gun2); C2(gun2)=C1(gun1);	[beta(ind(i)),revList] = findIsoluminance_noCLUT(C2,C1,rgbGamma,w);endScreen('closeall');p=polyfit(range,beta,2);figureplot(range,beta);holdplot(range,polyval(p,range),'r')